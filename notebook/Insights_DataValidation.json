{
	"name": "Insights_DataValidation",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p3sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false
		},
		"metadata": {
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"workspace = 'prod'\r\n",
					"collection = \"M365\"\r\n",
					"version = \"1.4.0\"\r\n",
					"options = {'header':False}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /OEATestKit_py"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def should_test(entity_path):\r\n",
					"    #Should only run test on data if there is data to test\r\n",
					"    raw_path = f'stage1/Transactional/{entity_path}'\r\n",
					"    batch_type, source_data_format = oea.get_batch_info(raw_path)\r\n",
					"    source_url = oea.to_url(f'{raw_path}/{batch_type}_batch_data')\r\n",
					"    if batch_type == 'snapshot' or batch_type=='additive': source_url = f'{source_url}/{oea.get_latest_folder(source_url)}'\r\n",
					"    return oea.get_folder_size(source_url) > 0\r\n",
					"    \r\n",
					"def validate_all_data_was_ingested(tables_source):\r\n",
					"    items = oea.get_folders(tables_source)\r\n",
					"    options = {'header':False}\r\n",
					"    for item in items: \r\n",
					"        try:\r\n",
					"            if item == 'metadata.csv':\r\n",
					"                logger.info('ignore metadata processing, since this is not a table to be ingested')\r\n",
					"            elif item == 'activity':\r\n",
					"                oea_test_kit.test_raw_data_is_subset_of_lake(collection, version, item, '_c3', options)\r\n",
					"            elif item == 'AadGroupMembership':\r\n",
					"                if(should_test('M365/v'+ version +'/' + item)):\r\n",
					"                    oea_test_kit.test_raw_data_is_subset_of_lake(collection, version, item, '_c5', options)\r\n",
					"            elif item == 'PersonRelationship':\r\n",
					"                logger.info('No test data')\r\n",
					"            elif item == 'RefTranslation':\r\n",
					"                logger.info('No test data')\r\n",
					"            else:\r\n",
					"                if(should_test('M365/v'+ version +'/' + item)):\r\n",
					"                    oea_test_kit.test_raw_data_is_subset_of_lake(collection, version, item, '_c0', options)\r\n",
					"            print(f\"item {item} passed test\")\r\n",
					"        except AnalysisException as e:\r\n",
					"            print(f\"item {item} failed test\")\r\n",
					"\r\n",
					"def validate_no_duplicates(table_source):\r\n",
					"    items = oea.get_folders(table_source)\r\n",
					"    for item in items: \r\n",
					"        try:\r\n",
					"            if item == 'metadata.csv':\r\n",
					"                logger.info('ignore metadata processing, since this is not a table to be ingested')\r\n",
					"            elif item == 'activity':\r\n",
					"                oea_test_kit.test_has_duplicates(collection, version, item, '_c3')\r\n",
					"            elif item == 'AadGroupMembership':\r\n",
					"                if(should_test('M365/v'+ version +'/' + item)):\r\n",
					"                    oea_test_kit.test_has_duplicates(collection, version, item, '_c5')\r\n",
					"            elif item == 'PersonRelationship':\r\n",
					"                logger.info('No test data')\r\n",
					"            elif item == 'RefTranslation':\r\n",
					"                logger.info('No test data')\r\n",
					"            else:\r\n",
					"                if(should_test('M365/v'+ version +'/' + item)):\r\n",
					"                    oea_test_kit.test_has_duplicates(collection, version, item, '_c0')\r\n",
					"            print(f\"item {item} passed test\")\r\n",
					"        except AnalysisException as e:\r\n",
					"            print(f\"item {item} failed test\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"validate_all_data_was_ingested('stage1/Transactional/M365/v' + version)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"validate_no_duplicates('stage1/Transactional/M365/v' + version)"
				]
			}
		]
	}
}